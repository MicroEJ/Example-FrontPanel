<!--
	ANT

	Copyright 2020 MicroEJ Corp. All rights reserved.
	Use of this source code is governed by a BSD-style license that can be found with this software.
	
-->
<project name="module-platform" xmlns:ea="antlib:org.apache.easyant" xmlns:mam="antlib:com.is2t.mam.ant" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
		This script builds the platform into current workspace.
	-->

	<!-- Sanity checks -->
	<fail unless="eclipse.home" message="Set the MicroEJ SDK directory path in the `eclipse.home` property (If you are using easyant-build-component framework the full name of the property is `easyant.inject.eclipse.home`)."/>
	<fail unless="com.microej.platformbuilder.platform.filename" message="Set the name of the `.xml` or `.platform` file in the `com.microej.platformbuilder.platform.filename` property."/>
	
	<!-- Global properties -->	
	<dirname file="${ant.file.module-platform}" property="module-platform.dir"/>
	<property name="platform.name" value="${module.name}"/>
	<property name="platform.version" value="${ivy.revision}"/>
	<property name="platform.architecture.repository" location="${target}/microejRepository"/>
	<property name="eclipse-antRunner.build.target" value="module-platform:eclipseantrunner:build"/>
	<property name="eclipse-antRunner.eclipse.home" location="${eclipse.home}"/>
	<property name="eclipse-antRunner.build.script" location="${module-platform.dir}/module-platform/eclipseantrunner.ant"/>

	<!-- Check if the MicroEJ Architecture is available --> 
	<target name="module-platform:architecture:check" >

		<fail unless="dependencies.output.dir"/>
		
		<!-- By default the MicroEJ Architecture is loaded from the ivy dependencies. --> 
		<property name="microej.architecture.dir" location="${dependencies.output.dir}"/>
		
		<!-- Ensure at least one architecture is available in ivy file -->
		<fail message=".${line.separator}
			No MicroEJ Architecture found in ${microej.architecture.dir} directory.${line.separator}
			You have to reference the MicroEJ Architecture by adding a dependency in your Ivy file (and so retrieve it using Ivy).
			">
			<condition>
				<resourcecount when="equal" count="0">
					<fileset dir="${microej.architecture.dir}" includes="*.xpf" erroronmissingdir="false"/>
				</resourcecount>
			</condition>
		</fail>
		
		<!-- Ensure only one architecture is available in ivy file -->
		<fail message=".${line.separator}
			Several MicroEJ Architectures found in ${microej.architecture.dir} directory.${line.separator}
			You have to reference only one MicroEJ Architecture by adding a dependency in your Ivy file (and so retrieve it using Ivy).
			">
			<condition>
				<resourcecount when="greater" count="1">
					<fileset dir="${microej.architecture.dir}" includes="*.xpf" erroronmissingdir="false"/>
				</resourcecount>
			</condition>
		</fail>
		
		<!-- Set architecture file path -->
		<pathconvert property="microej.architecture.file">
			<first>
				<fileset dir="${microej.architecture.dir}" includes="*.xpf"/>
			</first>
		</pathconvert>

		<!-- Load architecture characteristics -->
		<property url="jar:file:${microej.architecture.file}!/release.properties" prefix="microej.architecture"/>
		
	</target>
	
	<!-- Prepare platform configuration file according selected MicroEJ Architecture -->
	<target name="module-platform:description" extensionOf="abstract-compile:compile-ready" depends="module-platform:architecture:check">

		<!-- Load platform configuration file -->
		<xmlproperty 
			file="${project.dir}/${com.microej.platformbuilder.platform.filename}"
			collapseAttributes="false"
			prefix="configuration"
		/>

		<!-- Replace some platform configurations -->
		<replace file="${project.dir}/${com.microej.platformbuilder.platform.filename}">
			
			<!-- Replace MicroEJ Architecture -->
			<replacefilter token="&quot;${configuration.platform.environment(architecture)}&quot;" value="&quot;${microej.architecture.architecture}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(baseline)}&quot;" value="&quot;${microej.architecture.baseline}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(hardwarePartNumber)}&quot;" value="&quot;${microej.architecture.hardwarePartNumber}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(level)}&quot;" value="&quot;${microej.architecture.level}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(licenseTag)}&quot;" value="&quot;${microej.architecture.licenseTag}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(name)}&quot;" value="&quot;${microej.architecture.name}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(provider)}&quot;" value="&quot;${microej.architecture.provider}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(techVersion)}&quot;" value="&quot;${microej.architecture.techVersion}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(toolchain)}&quot;" value="&quot;${microej.architecture.toolchain}&quot;"/>
			<replacefilter token="&quot;${configuration.platform.environment(version)}&quot;" value="&quot;${microej.architecture.version}&quot;"/>
			
			<!-- Replace platform properties -->
            <replacefilter token="&quot;${configuration.platform(name)}&quot;" value="&quot;${platform.name}&quot;"/>
			<replacefilter token="&quot;${configuration.platform(version)}&quot;" value="&quot;${platform.version}&quot;"/>
			
		</replace>
		
	</target>
	
	<!-- Check the platform output folder -->
	<target name="module-platform:project:check" extensionOf="abstract-compile:compile-ready" depends="module-platform:description">
		
		<!-- Use same naming convention than MicroEJ Workbench-->
		<property name="platform.project.name" value="${configuration.platform(hardwarePartNumber)}-${platform.name}-${microej.architecture.toolchain}-${platform.version}"/>
		
		<!-- Error when output folder exists and not denote a platform project -->
		<fail message=".${line.separator}
			Output platform '${project.parent.dir}/${platform.project.name}' already exists and is not a platform project.${line.separator}
			Delete it or change module name and / or version.
			">
			<condition>
				<and>
					<available file="${project.parent.dir}/${platform.project.name}/.project" type="file"/>
					<or>
						<not><resourcecontains resource="${project.parent.dir}/${platform.project.name}/.project" substring="jpfNature"/></not>
						<not><resourcecontains resource="${project.parent.dir}/${platform.project.name}/.project" substring="jpfBuilder"/></not>
					</or>
				</and>
			</condition>
		</fail>
		
		<condition property="platform.expected.project.exist" value="true">
			<available file="${project.parent.dir}/${platform.project.name}" type="dir"/>
		</condition>
		
		<condition property="platform.buildproject.name" value="platformtmp" else="${platform.project.name}" >
			<istrue value="${platform.expected.project.exist}"/>
		</condition>
		
	</target>
	
	<!-- Delete content of existing platform before building a new one -->
	<target name="module-platform:project:clean" extensionOf="abstract-compile:compile-ready" depends="module-platform:project:check" if="${platform.expected.project.exist}">
		<delete includeemptydirs="true">
			<fileset dir="${project.parent.dir}/${platform.project.name}" includes="**/*" excludes=".project"/>
		</delete>
	</target>
	
	<!-- Build the platform -->
	<target name="module-platform:build" extensionOf="abstract-compile:compile" depends="-eclipse-antRunner:init">
		<runEclipseAntRunner>
			<args.properties>
				<jvmarg value="-Dmicroej.repository=${platform.architecture.repository}"/>
				<arg value="-Djpf.configuration.file=${project.dir}/${com.microej.platformbuilder.platform.filename}"/>
				<arg value="-Dmicroej.architecture.dir=${microej.architecture.dir}"/>
				<arg value="-Dant.file.com.is2t.easyant.plugins;eclipse-antRunner=${ant.file.com.is2t.easyant.plugins;eclipse-antRunner}"/>
				<arg value="-Dplatform.project.name=${platform.buildproject.name}"/>
				<arg value="-Dscripts.dir=${target}/scripts"/>
			</args.properties>
		</runEclipseAntRunner>
	</target>
	
	<!-- Copy the tmp platform in expected output platform project dir (prevent eclipse compilation error during platform build) -->
	<target name="module-platform:move" extensionOf="abstract-compile:compile" depends="module-platform:build" if="${platform.expected.project.exist}">
		<move todir="${project.parent.dir}/${platform.project.name}">
			<fileset dir="${project.parent.dir}/${platform.buildproject.name}" includes="**/*" excludes=".project"/>
		</move>
		<delete dir="${project.parent.dir}/${platform.buildproject.name}"/>
	</target>
	
	<!-- Copy the platform in target output dir -->
	<target name="module-platform:preparePublication" extensionOf="abstract-compile:compile" depends="module-platform:move" unless="${skip.publish}">
		<property name="platform.publish.dir" location="${target}/platform"/>
		<copy todir="${platform.publish.dir}/${platform.project.name}">
			<fileset dir="${project.parent.dir}/${platform.project.name}" includes="**/*"/>
		</copy>
	</target>
	
	<!-- Print a report; useful when user has changed the initial platform version because project is not available in workspace. -->
	<target name="module-platform:report" extensionOf="package">
		<echo message="
			============================================================================================================${line.separator}
			Platform has been built in this project: '${project.parent.dir}/${platform.project.name}'.${line.separator}
			Import this project if not already available in your workspace:${line.separator}
				'File' &gt; 'Import...' &gt; 'General' &gt; 'Existing Project into Workspace' &gt; 'Next'${line.separator}
				'Select root directory: ${project.parent.dir}/${platform.project.name}' &gt; 'Finish'${line.separator}
			============================================================================================================${line.separator}
			"/>
	</target>

</project>
